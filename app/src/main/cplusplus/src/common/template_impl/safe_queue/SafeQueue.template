/**
 * @file SafeQueue.cpp
 * @author your name (zemingzeng@126.com)
 * @brief
 * @version 0.1
 * @date 2023-11-17
 *
 * @copyright Copyright (c) 2023
 *
 */

#include "log/Log.h"

using namespace mingzz;

#define SAFEQUEUE_DEBUG_ON false

#define IF_SAFEQUEUE_DEBUG_ON  if( \
                     SAFEQUEUE_DEBUG_ON   \
                   )

template<typename T>
SafeQueue<T>::SafeQueue() : mAbort(0) {
    IF_SAFEQUEUE_DEBUG_ON LOGD("SafeQueue<T> : SafeQueue!");
}

template<typename T>
SafeQueue<T>::~SafeQueue() {
    IF_SAFEQUEUE_DEBUG_ON LOGD("SafeQueue<T> ~SafeQueue!");
}

template<typename T>
void SafeQueue<T>::abort() {
    //std::lock_guard <std::mutex> lock(mMutex); // 获取锁
    //不加锁可能需要马上起到影响
    IF_SAFEQUEUE_DEBUG_ON  LOGD("SafeQueue abort!");
    mAbort = 1;
    mCondition.notify_all();
}

template<typename T>
int SafeQueue<T>::size() {
    std::lock_guard <std::mutex> lock(mMutex); // 获取锁
    if (1 == mAbort) {
        return -1;
    }
    //IF_SAFEQUEUE_DEBUG_ON LOGD("SafeQueue<T> size()!");
    return mQueue.size();
}

template<typename T>
int SafeQueue<T>::push(T t) {
    std::lock_guard <std::mutex> lock(mMutex); // 获取锁
    if (1 == mAbort) {
        LOGE("SafeQueue<T> push : already abort can not push!");
        return -1;
    }
    mQueue.push(t);
    mCondition.notify_one(); // 尝试唤醒 wait
    //IF_SAFEQUEUE_DEBUG_ON LOGD("SafeQueue<T> push!");
    return 0;
}

template<typename T>
int SafeQueue<T>::front(T &t) {
    std::lock_guard <std::mutex> lock(mMutex);
    if (1 == mAbort) {
        return -1;
    }
    if (mQueue.empty()) {
        return -1;
    }
    t = mQueue.front();
    IF_SAFEQUEUE_DEBUG_ON LOGD("SafeQueue<T> front : success!");
    return 0;
}

template<typename T>
int SafeQueue<T>::pop(T &t, int timeOut /*milliseconds*/) {
    std::unique_lock <std::mutex> lock(mMutex);
    bool ret = true;
    if (mQueue.empty() && 1 != mAbort) {
        // 等待push
        ret = mCondition.wait_for(lock, std::chrono::milliseconds(timeOut),
                                  [this]() -> bool {
                                      return !mQueue.empty() || mAbort; // 判断此条件，返回true会继续执行下面的代码
                                      // 否则，还会wait，等待下一次notify
                                  });
    }

    //睡眠后，超时被唤醒或者设置了abort为1
    if (1 == mAbort || !ret) {
        IF_SAFEQUEUE_DEBUG_ON LOGD("SafeQueue pop : wait timeout or abort!!");

        return -1;
    }

    // 取头元素数据
    t = mQueue.front();
    // 头元素从队列中移除
    mQueue.pop();

    IF_SAFEQUEUE_DEBUG_ON LOGD("SafeQueue<T> pop : success!");

    return 0;
}
